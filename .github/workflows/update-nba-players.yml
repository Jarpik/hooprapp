name: Update NBA Player Data

on:
  # Manual trigger - you can run this anytime from GitHub UI
  workflow_dispatch:
    inputs:
      batch_size:
        description: 'Number of players to process (default: 25)'
        required: false
        default: '25'

  # Run after any push to the update script (for testing)
  push:
    branches: [ main ]
    paths: 
      - 'scripts/update-players.js'

jobs:
  update-players:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'scripts/package.json'
        
    - name: Install dependencies
      working-directory: ./scripts
      run: |
        npm install
        
    - name: Check database status before update
      working-directory: ./scripts
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      run: |
        node -e "
        const { Pool } = require('pg');
        const pool = new Pool({
          connectionString: process.env.DATABASE_URL,
          ssl: { rejectUnauthorized: false }
        });
        
        (async () => {
          try {
            const result = await pool.query(\`
              SELECT 
                COUNT(*) as total,
                COUNT(CASE WHEN ppg > 0 THEN 1 END) as with_stats,
                COUNT(CASE WHEN position IS NOT NULL AND position != 'N/A' THEN 1 END) as with_position,
                COUNT(CASE WHEN ppg > 0 AND position IS NOT NULL AND position != 'N/A' THEN 1 END) as complete
              FROM players WHERE active = true
            \`);
            
            const stats = result.rows[0];
            console.log('ðŸ“Š Database Status Before Update:');
            console.log(\`Total: \${stats.total}\`);
            console.log(\`With stats: \${stats.with_stats} (\${Math.round(stats.with_stats/stats.total*100)}%)\`);
            console.log(\`With position: \${stats.with_position} (\${Math.round(stats.with_position/stats.total*100)}%)\`);
            console.log(\`Complete: \${stats.complete} (\${Math.round(stats.complete/stats.total*100)}%)\`);
          } catch (error) {
            console.error('Error checking database:', error.message);
            process.exit(1);
          } finally {
            await pool.end();
          }
        })();
        "
        
    - name: Run enhanced player data update
      working-directory: ./scripts
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      run: |
        echo "ðŸš€ Starting NBA player data update..."
        node update-players.js
        
    - name: Check completion status
      working-directory: ./scripts
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      run: |
        node -e "
        const { Pool } = require('pg');
        const pool = new Pool({
          connectionString: process.env.DATABASE_URL,
          ssl: { rejectUnauthorized: false }
        });
        
        (async () => {
          try {
            const result = await pool.query(\`
              SELECT 
                COUNT(*) as total,
                COUNT(CASE WHEN ppg > 0 AND position IS NOT NULL AND position != 'N/A' THEN 1 END) as complete,
                COUNT(CASE WHEN ppg IS NULL OR ppg = 0 OR position IS NULL OR position = 'N/A' THEN 1 END) as remaining
              FROM players WHERE active = true
            \`);
            
            const stats = result.rows[0];
            const completion_rate = Math.round(stats.complete/stats.total*100);
            
            console.log('ðŸ“Š Final Database Status:');
            console.log(\`Total: \${stats.total}\`);
            console.log(\`Complete: \${stats.complete} (\${completion_rate}%)\`);
            console.log(\`Remaining: \${stats.remaining}\`);
            
            if (stats.remaining === 0) {
              console.log('ðŸŽ‰ ALL PLAYERS COMPLETE!');
            } else {
              console.log(\`ðŸ”„ \${stats.remaining} players still need data.\`);
            }
          } catch (error) {
            console.error('Error:', error.message);
          } finally {
            await pool.end();
          }
        })();
        "
